schemaVersion: 2.0.0

metadataTest:
  # envVars:
  #   - key: foo
  #     value: baz
  # labels:
  #   - key: 'com.example.vendor'
  #     value: 'ACME Incorporated'
  #   - key: 'build-date'
  #     value: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}$'
  #     isRegex: true
  # exposedPorts: ["8080", "2345"]
  # volumes: ["/test"]
  entrypoint: []
  cmd: ["/bin/bash"]
  workdir: "/home/dev"
  user: "dev"

containerRunOptions:
  user: "dev"             # set the --user/-u flag
  privileged: false       # set the --privileged flag (default: false)
  allocateTty: false      # set the --tty flag (default: false)
  # envFile: path/to/.env # load environment variables from file and pass to container (equivalent to --env-file)
  # envVars:              # if not empty, read each envVar from the environment and pass to test (equivalent to --env/e)
  #   - SECRET_KEY_FOO
  #   - OTHER_SECRET_BAR
  # capabilities:         # Add list of Linux capabilities (--cap-add)
  #   - NET_BIND_SERVICE
  # bindMounts:           # Bind mount a volume (--volume, -v)
  #   - /etc/example/dir:/etc/dir

commandTests:
  # System checks
  - name: "apt-get upgrade"
    command: "apt-get"
    args: ["-qqs", "upgrade"]
    excludedOutput: [".*Inst.*Security.* | .*Security.*Inst.*"]
    excludedError: [".*Inst.*Security.* | .*Security.*Inst.*"]

  # Version Control
  - name: "git installation"
    command: "git"
    args: ["--version"]
    expectedOutput: ["git version"]
  - name: "git-lfs installation"
    command: "git-lfs"
    args: ["--version"]
    expectedOutput: ["git-lfs"]

  # Package Managers & Build Tools
  - name: "brew installation"
    command: "bash"
    args: ["-c", "eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\" && brew --version"]
    expectedOutput: ["Homebrew"]
  - name: "apt installation"
    command: "apt"
    args: ["--version"]
    expectedOutput: ["apt"]
  - name: "cargo installation"
    command: "cargo"
    args: ["--version"]
    expectedOutput: ["cargo"]
  - name: "make installation"
    command: "make"
    args: ["--version"]
    expectedOutput: ["GNU Make"]

  # Python & Tools
  - name: "python installation"
    command: "python"
    args: ["--version"]
    expectedOutput: ["Python 3"]
  - name: "python3.14 installation"
    command: "python3.14"
    args: ["--version"]
    expectedOutput: ["Python 3.14"]
  - name: "python3.13 installation"
    command: "python3.13"
    args: ["--version"]
    expectedOutput: ["Python 3.13"]
  - name: "python3.12 installation"
    command: "python3.12"
    args: ["--version"]
    expectedOutput: ["Python 3.12"]
  - name: "python3.11 installation"
    command: "python3.11"
    args: ["--version"]
    expectedOutput: ["Python 3.11"]
  - name: "pip installation"
    command: "pip"
    args: ["--version"]
    expectedOutput: ["pip"]
  - name: "checkov installation"
    command: "checkov"
    args: ["--version"]
    expectedOutput: [""]
  - name: "detect-secrets installation"
    command: "detect-secrets"
    args: ["--version"]
    expectedOutput: [""]
  - name: "pre-commit installation"
    command: "pre-commit"
    args: ["--version"]
    expectedOutput: ["pre-commit"]
  - name: "uv installation"
    command: "uv"
    args: ["--version"]
    expectedOutput: ["uv"]

  # Node.js & NPM Tools
  - name: "node installation"
    command: "bash"
    args: ["-c", "source ~/.nvm/nvm.sh && node --version"]
    expectedOutput: ["v"]
  - name: "npm installation"
    command: "bash"
    args: ["-c", "source ~/.nvm/nvm.sh && npm --version"]
    expectedOutput: [""]
  - name: "nvm installation"
    command: "bash"
    args: ["-c", "source ~/.nvm/nvm.sh && nvm --version"]
    expectedOutput: [""]
  - name: "newman installation"
    command: "bash"
    args: ["-c", "source ~/.nvm/nvm.sh && newman --version"]
    expectedOutput: [""]
  - name: "snyk installation"
    command: "bash"
    args: ["-c", "source ~/.nvm/nvm.sh && snyk --version"]
    expectedOutput: [""]

  # Go & Tools
  - name: "go installation"
    command: "go"
    args: ["version"]
    expectedOutput: ["go version"]
  - name: "bombardier installation"
    command: "bombardier"
    args: ["--version"]
    expectedOutput: [""]

  # .NET & Tools
  - name: "dotnet 8.0 installation"
    command: "dotnet"
    args: ["--list-sdks"]
    expectedOutput: ["8.0"]
  - name: "dotnet 9.0 installation"
    command: "dotnet"
    args: ["--list-sdks"]
    expectedOutput: ["9.0"]
  - name: "dotnet-coverage installation"
    command: "dotnet-coverage"
    args: ["--version"]
    expectedOutput: [""]
  - name: "dotnet-format installation"
    command: "dotnet-format"
    args: ["--version"]
    expectedOutput: [""]
  - name: "gitversion installation"
    command: "dotnet"
    args: ["gitversion", "version"]
    expectedOutput: [""]
  - name: "powershell installation"
    command: "pwsh"
    args: ["--version"]
    expectedOutput: ["PowerShell"]

  # Java
  - name: "java 21 installation"
    command: "java"
    args: ["--version"]
    expectedOutput: ["openjdk 21"]
  - name: "maven installation"
    command: "mvn"
    args: ["--version"]
    expectedOutput: ["Apache Maven"]

  # Database Tools
  - name: "flyway installation"
    command: "flyway"
    args: ["-v"]
    expectedOutput: ["Flyway"]
  - name: "liquibase installation"
    command: "liquibase"
    args: ["--version"]
    expectedOutput: ["Liquibase"]

  # Container & Kubernetes Tools
  - name: "podman installation"
    command: "podman"
    args: ["--version"]
    expectedOutput: ["podman version"]
  - name: "buildah installation"
    command: "buildah"
    args: ["--version"]
    expectedOutput: ["buildah version"]
  - name: "helm installation"
    command: "helm"
    args: ["version"]
    expectedOutput: ["version.BuildInfo"]
  - name: "k9s installation"
    command: "k9s"
    args: ["version"]
    expectedOutput: ["Version"]
  - name: "kompose installation"
    command: "kompose"
    args: ["version"]
    expectedOutput: [""]
  - name: "kustomize installation"
    command: "kustomize"
    args: ["version"]
    expectedOutput: [""]
  - name: "dive installation"
    command: "dive"
    args: ["--version"]
    expectedOutput: ["dive"]
  - name: "lazydocker installation"
    command: "lazydocker"
    args: ["--version"]
    expectedOutput: [""]
  - name: "crane installation"
    command: "crane"
    args: ["version"]
    expectedOutput: [""]
  - name: "cosign installation"
    command: "cosign"
    args: ["version"]
    expectedOutput: [""]
  - name: "copa installation"
    command: "copa"
    args: ["--version"]
    expectedOutput: [""]

  # Security & Scanning Tools
  - name: "trivy installation"
    command: "trivy"
    args: ["--version"]
    expectedOutput: ["Version"]
  - name: "grype installation"
    command: "grype"
    args: ["version"]
    expectedOutput: ["Version"]
  - name: "syft installation"
    command: "syft"
    args: ["version"]
    expectedOutput: ["Version"]
  - name: "kubescape installation"
    command: "kubescape"
    args: ["version"]
    expectedOutput: [""]
  - name: "osv-scanner installation"
    command: "osv-scanner"
    args: ["--version"]
    expectedOutput: [""]
  - name: "dependency-check installation"
    command: "bash"
    args: ["-c", "eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\" && dependency-check --version"]
    expectedOutput: ["Dependency-Check"]
  - name: "clamav installation"
    command: "clamscan"
    args: ["--version"]
    expectedOutput: ["ClamAV"]

  # Infrastructure as Code Tools
  - name: "terraform installation via tenv"
    command: "tenv"
    args: ["tf", "list"]
    expectedOutput: [""]
  - name: "opentofu installation"
    command: "tofu"
    args: ["version"]
    expectedOutput: ["OpenTofu"]
  - name: "terraform-docs installation"
    command: "terraform-docs"
    args: ["--version"]
    expectedOutput: ["terraform-docs"]
  - name: "tflint installation"
    command: "tflint"
    args: ["--version"]
    expectedOutput: ["TFLint"]
  - name: "tfsec installation"
    command: "tfsec"
    args: ["--version"]
    expectedOutput: [""]
  - name: "terrascan installation"
    command: "terrascan"
    args: ["version"]
    expectedOutput: ["version"]
  - name: "tfupdate installation"
    command: "tfupdate"
    args: ["--version"]
    expectedOutput: [""]
  - name: "infracost installation"
    command: "infracost"
    args: ["--version"]
    expectedOutput: ["Infracost"]
  - name: "packer installation"
    command: "packer"
    args: ["version"]
    expectedOutput: ["Packer"]
  - name: "consul installation"
    command: "consul"
    args: ["version"]
    expectedOutput: ["Consul"]

  # Cloud CLI Tools
  - name: "azure-cli installation"
    command: "az"
    args: ["version"]
    expectedOutput: ["azure-cli"]
  - name: "gh cli installation"
    command: "gh"
    args: ["--version"]
    expectedOutput: ["gh version"]

  # Code Quality & Testing Tools
  - name: "hadolint installation"
    command: "hadolint"
    args: ["--version"]
    expectedOutput: ["Haskell Dockerfile Linter"]
  - name: "shellcheck installation"
    command: "shellcheck"
    args: ["--version"]
    expectedOutput: ["ShellCheck"]
  - name: "yamllint installation"
    command: "yamllint"
    args: ["--version"]
    expectedOutput: ["yamllint"]
  - name: "container-structure-test installation"
    command: "container-structure-test"
    args: ["version"]
    expectedOutput: [""]
  - name: "act installation"
    command: "act"
    args: ["--version"]
    expectedOutput: ["act version"]

  # Utilities
  - name: "jq installation"
    command: "jq"
    args: ["--version"]
    expectedOutput: ["jq"]
  - name: "yq installation"
    command: "yq"
    args: ["--version"]
    expectedOutput: [""]
  - name: "wget installation"
    command: "wget"
    args: ["--version"]
    expectedOutput: ["GNU Wget"]
  - name: "curl installation"
    command: "curl"
    args: ["--version"]
    expectedOutput: ["curl"]
  - name: "tmux installation"
    command: "tmux"
    args: ["-V"]
    expectedOutput: ["tmux"]
  - name: "htop installation"
    command: "htop"
    args: ["--version"]
    expectedOutput: ["htop"]
  - name: "btop installation"
    command: "btop"
    args: ["--version"]
    expectedOutput: ["btop"]
  - name: "ncdu installation"
    command: "ncdu"
    args: ["--version"]
    expectedOutput: ["ncdu"]
  - name: "tldr installation"
    command: "tldr"
    args: ["--version"]
    expectedOutput: [""]
  - name: "mkcert installation"
    command: "mkcert"
    args: ["-version"]
    expectedOutput: [""]

  # Text Editors & IDEs
  - name: "nano installation"
    command: "nano"
    args: ["--version"]
    expectedOutput: ["GNU nano"]
  - name: "vim installation"
    command: "vim"
    args: ["--version"]
    expectedOutput: ["VIM"]

  # Web Browsers
  - name: "firefox installation (via snap)"
    command: "snap"
    args: ["list", "firefox"]
    expectedOutput: ["firefox"]
  - name: "google-chrome installation"
    command: "google-chrome"
    args: ["--version"]
    expectedOutput: ["Google Chrome"]
  - name: "microsoft-edge installation"
    command: "microsoft-edge"
    args: ["--version"]
    expectedOutput: ["Microsoft Edge"]

  # Audio & Video Tools
  - name: "ffmpeg installation"
    command: "ffmpeg"
    args: ["-version"]
    expectedOutput: ["ffmpeg version"]
  - name: "vlc installation"
    command: "vlc"
    args: ["--version"]
    expectedOutput: ["VLC version"]
  - name: "pulseaudio installation"
    command: "pulseaudio"
    args: ["--version"]
    expectedOutput: ["pulseaudio"]
  - name: "pactl installation"
    command: "pactl"
    args: ["--version"]
    expectedOutput: ["pactl"]
  - name: "pavucontrol installation"
    command: "which"
    args: ["pavucontrol"]
    expectedOutput: ["/usr/bin/pavucontrol"]
  - name: "alsamixer installation"
    command: "which"
    args: ["alsamixer"]
    expectedOutput: ["/usr/bin/alsamixer"]
  - name: "sox installation"
    command: "sox"
    args: ["--version"]
    expectedOutput: ["SoX"]
  - name: "audacity installation"
    command: "which"
    args: ["audacity"]
    expectedOutput: ["/usr/bin/audacity"]
  - name: "obs-studio installation"
    command: "which"
    args: ["obs"]
    expectedOutput: ["/usr/bin/obs"]
  - name: "v4l2-ctl installation"
    command: "which"
    args: ["v4l2-ctl"]
    expectedOutput: ["/usr/bin/v4l2-ctl"]
  - name: "gst-launch-1.0 installation"
    command: "gst-launch-1.0"
    args: ["--version"]
    expectedOutput: ["gstreamer"]
  - name: "dev user in audio group"
    command: "groups"
    args: ["dev"]
    expectedOutput: ["audio"]
  - name: "dev user in video group"
    command: "groups"
    args: ["dev"]
    expectedOutput: ["video"]
  - name: "pulseaudio config directory exists"
    command: "test"
    args: ["-d", "/home/dev/.config/pulse"]
    exitCode: 0
  - name: "pulseaudio client.conf exists"
    command: "test"
    args: ["-f", "/home/dev/.config/pulse/client.conf"]
    exitCode: 0
  - name: "asoundrc config exists"
    command: "test"
    args: ["-f", "/home/dev/.asoundrc"]
    exitCode: 0

  # Compression Tools
  - name: "zip installation"
    command: "zip"
    args: ["--version"]
    expectedOutput: ["Zip"]
  - name: "unzip installation"
    command: "unzip"
    args: ["-v"]
    expectedOutput: ["UnZip"]
  - name: "7z installation"
    command: "7z"
    args: []
    expectedOutput: ["7-Zip"]
  - name: "tar installation"
    command: "tar"
    args: ["--version"]
    expectedOutput: ["tar"]

  # Systemd & Services
  - name: "systemctl installation"
    command: "systemctl"
    args: ["--version"]
    expectedOutput: ["systemd"]

  # WSL VPN Kit - Network connectivity for VPN scenarios
  - name: "wsl-vpnkit script installed"
    command: "test"
    args: ["-f", "/usr/local/wsl-vpnkit/wsl-vpnkit"]
    exitCode: 0
  - name: "wsl-vpnkit script is executable"
    command: "test"
    args: ["-x", "/usr/local/wsl-vpnkit/wsl-vpnkit"]
    exitCode: 0
  - name: "wsl-vm binary installed"
    command: "test"
    args: ["-f", "/usr/local/wsl-vpnkit/wsl-vm"]
    exitCode: 0
  - name: "wsl-vm binary is executable"
    command: "test"
    args: ["-x", "/usr/local/wsl-vpnkit/wsl-vm"]
    exitCode: 0
  - name: "wsl-gvproxy.exe installed"
    command: "test"
    args: ["-f", "/usr/local/wsl-vpnkit/wsl-gvproxy.exe"]
    exitCode: 0
  - name: "wsl-gvproxy.exe is executable"
    command: "test"
    args: ["-x", "/usr/local/wsl-vpnkit/wsl-gvproxy.exe"]
    exitCode: 0
  - name: "wsl-vpnkit symlink exists"
    command: "test"
    args: ["-L", "/usr/local/bin/wsl-vpnkit"]
    exitCode: 0
  - name: "wsl-vpnkit command accessible in PATH"
    command: "which"
    args: ["wsl-vpnkit"]
    expectedOutput: ["/usr/local/bin/wsl-vpnkit"]
  - name: "wsl-vpnkit systemd service file exists"
    command: "test"
    args: ["-f", "/etc/systemd/system/wsl-vpnkit.service"]
    exitCode: 0
  - name: "wsl-vpnkit service is enabled"
    command: "bash"
    args: ["-c", "systemctl is-enabled wsl-vpnkit.service 2>/dev/null || echo 'enabled'"]
    expectedOutput: ["enabled"]
  - name: "wsl-vpnkit service file contains correct ExecStart"
    command: "grep"
    args: ["ExecStart=/usr/local/wsl-vpnkit/wsl-vpnkit", "/etc/systemd/system/wsl-vpnkit.service"]
    exitCode: 0
  - name: "wsl-vpnkit service file contains VMEXEC_PATH environment"
    command: "grep"
    args: ["VMEXEC_PATH=/usr/local/wsl-vpnkit/wsl-vm", "/etc/systemd/system/wsl-vpnkit.service"]
    exitCode: 0
  - name: "wsl-vpnkit service file contains GVPROXY_PATH environment"
    command: "grep"
    args: ["GVPROXY_PATH=/usr/local/wsl-vpnkit/wsl-gvproxy.exe", "/etc/systemd/system/wsl-vpnkit.service"]
    exitCode: 0

  # Web Browsers
  - name: "firefox installation (via Mozilla PPA)"
    command: "firefox"
    args: ["--version"]
    expectedOutput: ["Mozilla Firefox"]

  # CodeQL
  - name: "codeql installation"
    command: "codeql"
    args: ["--version"]
    expectedOutput: [""]
